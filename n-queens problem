#include <stdio.h>
#include <stdbool.h>

#define MAX_N 10 // Maximum board size

void printBoard(int board[MAX_N][MAX_N], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%c ", board[i][j] ? 'Q' : '.');
        }
        printf("\n");
    }
}

bool isSafe(int board[MAX_N][MAX_N], int row, int col, int n) {
    for (int i = 0; i < col; i++) {
        if (board[row][i]) {
            return false;
        }
    }

    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    for (int i = row, j = col; i < n && j >= 0; i++, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    return true;
}

bool solveNQueens(int board[MAX_N][MAX_N], int col, int n) {
    if (col >= n) {
        return true;
    }

    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col, n)) {
            board[i][col] = 1;

            if (solveNQueens(board, col + 1, n)) {
                return true;
            }

            board[i][col] = 0;
        }
    }

    return false;
}

int main() {
    int n;

    printf("Enter the size of the chessboard (N): ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_N) {
        printf("Invalid board size.\n");
        return 1;
    }

    int board[MAX_N][MAX_N] = {0};

    if (solveNQueens(board, 0, n)) {
        printf("Solution exists:\n");
        printBoard(board, n);
    } else {
        printf("Solution does not exist.\n");
    }

    return 0;
}
